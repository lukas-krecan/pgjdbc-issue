/*
 * This file is generated by jOOQ.
 */
package com.example.outboxexporter.generated.tables


import com.example.outboxexporter.generated.Public
import com.example.outboxexporter.generated.enums.KafkaMessageStatus
import com.example.outboxexporter.generated.indexes.IDX_KAFKA_OUTBOXES_STATUS
import com.example.outboxexporter.generated.keys.KAFKA_OUTBOXES_PKEY

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KafkaOutboxes(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.kafka_outboxes</code>
         */
        val KAFKA_OUTBOXES: KafkaOutboxes = KafkaOutboxes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.kafka_outboxes.id</code>.
     */
    val ID: TableField<Record, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.kafka_outboxes.subject</code>.
     */
    val SUBJECT: TableField<Record, String?> = createField(DSL.name("subject"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.kafka_outboxes.topic</code>.
     */
    val TOPIC: TableField<Record, String?> = createField(DSL.name("topic"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.kafka_outboxes.key</code>.
     */
    val KEY: TableField<Record, String?> = createField(DSL.name("key"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.kafka_outboxes.partition_key</code>.
     */
    val PARTITION_KEY: TableField<Record, String?> = createField(DSL.name("partition_key"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.kafka_outboxes.schema_version</code>.
     */
    val SCHEMA_VERSION: TableField<Record, Int?> = createField(DSL.name("schema_version"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.kafka_outboxes.payload</code>.
     */
    val PAYLOAD: TableField<Record, JSONB?> = createField(DSL.name("payload"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>public.kafka_outboxes.headers</code>.
     */
    val HEADERS: TableField<Record, JSONB?> = createField(DSL.name("headers"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>public.kafka_outboxes.encoded_message_bytesize</code>.
     */
    val ENCODED_MESSAGE_BYTESIZE: TableField<Record, Int?> = createField(DSL.name("encoded_message_bytesize"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.kafka_outboxes.status</code>.
     */
    val STATUS: TableField<Record, KafkaMessageStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(com.example.outboxexporter.generated.enums.KafkaMessageStatus::class.java), this, "")

    /**
     * The column <code>public.kafka_outboxes.created_at</code>.
     */
    val CREATED_AT: TableField<Record, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.kafka_outboxes.error</code>.
     */
    val ERROR: TableField<Record, String?> = createField(DSL.name("error"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.kafka_outboxes.confirmed_at</code>.
     */
    val CONFIRMED_AT: TableField<Record, LocalDateTime?> = createField(DSL.name("confirmed_at"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.kafka_outboxes.offset</code>.
     */
    val OFFSET: TableField<Record, Long?> = createField(DSL.name("offset"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.kafka_outboxes.partition</code>.
     */
    val PARTITION: TableField<Record, Int?> = createField(DSL.name("partition"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.kafka_outboxes</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.kafka_outboxes</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.kafka_outboxes</code> table reference
     */
    constructor(): this(DSL.name("kafka_outboxes"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, KAFKA_OUTBOXES, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_KAFKA_OUTBOXES_STATUS)
    override fun getIdentity(): Identity<Record, Long?> = super.getIdentity() as Identity<Record, Long?>
    override fun getPrimaryKey(): UniqueKey<Record> = KAFKA_OUTBOXES_PKEY
    override fun `as`(alias: String): KafkaOutboxes = KafkaOutboxes(DSL.name(alias), this)
    override fun `as`(alias: Name): KafkaOutboxes = KafkaOutboxes(alias, this)
    override fun `as`(alias: Table<*>): KafkaOutboxes = KafkaOutboxes(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): KafkaOutboxes = KafkaOutboxes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): KafkaOutboxes = KafkaOutboxes(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): KafkaOutboxes = KafkaOutboxes(name.getQualifiedName(), null)
}
